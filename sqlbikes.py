# -*- coding: utf-8 -*-
"""sqlBikes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ct3CHze7imakgSJUaIO6-sUZ6SH1RCP-
"""

import sqlite3
import random
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

brands_df = pd.read_csv('/content/brands.csv')
brands_df.head()

categories_df = pd.read_csv('/content/categories.csv')
categories_df

customers_df = pd.read_csv('/content/customers.csv')
customers_df.head()

order_items_df = pd.read_csv('/content/order_items.csv')
order_items_df.head()

orders_df = pd.read_csv('/content/orders.csv')
orders_df

products_df = pd.read_csv('/content/products.csv')
products_df.head()

staffs_df = pd.read_csv('/content/staffs.csv')
staffs_df.head()

stocks_df = pd.read_csv('/content/stocks.csv')
stocks_df.head()

stores_df = pd.read_csv('/content/stores.csv')
stores_df.head()

# Connect to the SQLite database
connection = sqlite3.connect('/content/bike.sqlite')
cursor = connection.cursor()

brands_df.to_sql('Brands', connection, if_exists='replace', index=False)

categories_df.to_sql('Categories', connection, if_exists='replace', index=False)

customers_df.to_sql('Customers', connection, if_exists='replace', index=False),
order_items_df.to_sql('OrderItems', connection, if_exists='replace', index=False),
orders_df.to_sql('Orders', connection, if_exists='replace', index=False),
products_df.to_sql('Products', connection, if_exists='replace', index=False),
staffs_df.to_sql('Staffs', connection, if_exists='replace', index=False),
stocks_df.to_sql('Stocks', connection, if_exists='replace', index=False),
stores_df.to_sql('Stores', connection, if_exists='replace', index=False)

querry = """
SELECT * FROM Products
"""
pd.read_sql_query(querry, connection)

querry = """
SELECT * FROM Stocks
"""
pd.read_sql_query(querry, connection)

querry = """
SELECT
    store_name,
    category_name,
    SUM(quantity) AS total_stock
FROM
    Categories
JOIN
    Products  ON categories.category_id = products.category_id
JOIN
    Stocks  ON products.product_id = stocks.product_id
JOIN
    Stores  ON stocks.store_id = stores.store_id
GROUP BY
    store_name, category_name
ORDER BY
    store_name, category_name;

"""
pd.read_sql_query(querry, connection)

query2 = '''
SELECT store_name, category_name, SUM(quantity) AS sum_qty
FROM Categories
JOIN Products ON Categories.category_id = Products.category_id
JOIN OrderItems ON Products.product_id = OrderItems.product_id
JOIN Orders ON OrderItems.order_id = Orders.order_id
JOIN Stores ON Orders.store_id = Stores.store_id
GROUP BY store_name, category_name
ORDER BY store_name, category_name;
'''

items_df = pd.read_sql_query(query2, connection)
items_df

store = items_df['store_name'].unique()
items_df['store_name'] = pd.Categorical(items_df['store_name'], categories = store, ordered = True)

category = items_df['category_name'].unique()
items_df['category_name'] = pd.Categorical(items_df['category_name'], categories = category, ordered = True)
items_df = items_df.groupby(['category_name', 'store_name'])['sum_qty'].sum().unstack().fillna(0)
ax = items_df.plot(kind = 'bar', figsize = (14, 8))
plt.title('Number of order items based on category name and store name')
plt.xlabel('Category Name')
plt.ylabel('Quantity')
plt.xticks(rotation = 0)

plt.show()

